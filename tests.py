from Crypto.Util.number import *
from tqdm import tqdm
import gmpy2

n = 13404425644413448535031711583007472581374541743052937178737379555407796985889460768304810603603225728350693974616782435478631937086139949107893206728322679
e = 1059652462950494009769164937271439622427205197853179285010441684051885956403104463671197302560790692191830158616002409486899761075969852830246931930092791
c = 9116918484583701393802769550110045469794196494174882631725061390605068189634978045790778441955516886862323853390457552545300706151466985334462447161518002
start = pow(2, 253) - 1
print(start)
end = pow(2, 256) - pow(2, 241) + 1
print(end)
print(end - start)

from itertools import product

for i in product(list(range(0, 256)), repeat=3):
    dp = (((1 << i[0]) | (1 << i[1]) | (1 << i[
        2]))) ^ 0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    if bin(dp)[2:].index('0') >= 15:
        continue
    print(bin(dp))
    tmp = e * dp - 1
    t = pow(3, tmp, n)
    p = gmpy2.gcd(n, t - 1)
    if p != 1:
        print("find p!")
        q = n // p
        phi = (p - 1) * (q - 1)
        d = inverse(e, phi)
        m = pow(c, d, n)
        print(long_to_bytes(m))
        break
