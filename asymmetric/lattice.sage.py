

# This file was *autogenerated* from the file lattice.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_40961 = Integer(40961)
#sage
from sage.stats.distributions.discrete_gaussian_polynomial import DiscreteGaussianDistributionPolynomialSampler as d_gauss
keys = open("public_keys.txt", "r").read().split("\n")[:-_sage_const_1 ]
temp1 = keys[_sage_const_0 ].find("^")
temp2 = keys[_sage_const_0 ].find(" ", temp1)
n=int(keys[_sage_const_0 ][temp1+_sage_const_1 :temp2])+_sage_const_1 
print(n)
q = _sage_const_40961 
F = GF(q)
R = PolynomialRing(F, names=('y',)); (y,) = R._first_ngens(1)
S = R.quotient(y**n + _sage_const_1 , names=('x',)); (x,) = S._first_ngens(1)
num=[]
for i in range(n):
    num.append({})
#print(num)
a=S(keys[_sage_const_0 ].replace('a: ',''))
#print(a)
keys=keys[_sage_const_1 :]
for key in keys:
    b=key.replace('b: ','')
    li=list(S(b))
    #print(li)
    for i in range(len(num)):
        try:
            num[i][li[i]]+=_sage_const_1 
        except:
            num[i][li[i]]=_sage_const_1 
asnum=[]
#print(num)
for i in num:
    asnum.append(max(i,key=i.get))  #{key:value}分别表示系数，系数出现次数。
#print(asnum)
aspoly=S(asnum)
flag=aspoly/a
print(list(flag))
flag=''.join(map(chr,flag))
print(flag)


