

# This file was *autogenerated* from the file lattice.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_40961 = Integer(40961)
from itertools import count


keys = open("public_keys.txt", "r").read().split("\n")[:-_sage_const_1 ]
print(keys[_sage_const_0 ])
temp1 = keys[_sage_const_0 ].find("^")
temp2 = keys[_sage_const_0 ].find(" ", temp1)

n = int(keys[_sage_const_0 ][temp1+_sage_const_1 :temp2]) + _sage_const_1 
q = _sage_const_40961 
F = GF(q)
R = PolynomialRing(F, names=('y',)); (y,) = R._first_ngens(1)
S = R.quotient(y**n + _sage_const_1 , names=('x',)); (x,) = S._first_ngens(1)
a = S(keys[_sage_const_0 ].replace("a: ", ""))
keys = keys[_sage_const_1 :]
counters = []
for i in range(n):
    counters.append({})
for key in keys:
    b = key.replace("b: ", "")
    b = list(S(b))
    # print(b)
    for i in range(n):
        try:
            counters[i][b[i]] += _sage_const_1 
        except:
            counters[i][b[i]] = _sage_const_1 

print(counters)
a_s = []
for counter in counters:
    #print(counter)
    dict_keys = counter.keys()
    max_key = _sage_const_0 
    maxi = _sage_const_0 
    for key in dict_keys:
        if counter[key] > maxi:
            maxi = counter[key]
            max_key = key
    a_s.append(max_key)
print(a_s)
a_s = S(a_s)
s = a_s/a
print (''.join(map(chr,list(s)))) 


#sage
""" from sage.stats.distributions.discrete_gaussian_polynomial import DiscreteGaussianDistributionPolynomialSampler as d_gauss
keys = open("public_keys.txt", "r").read().split("\n")[:-1]
temp1 = keys[0].find("^")
temp2 = keys[0].find(" ", temp1)
n=int(keys[0][temp1+1:temp2])+1
print(n)
q = 40961
F = GF(q)
R.<y> = PolynomialRing(F)
S.<x> = R.quotient(y^n + 1)
num=[]
for i in range(n):
    num.append({})
#print(num)
a=S(keys[0].replace('a: ',''))
#print(a)
keys=keys[1:]
for key in keys:
    b=key.replace('b: ','')
    li=list(S(b))
    #print(li)
    for i in range(len(num)):
        try:
            num[i][li[i]]+=1
        except:
            num[i][li[i]]=1
asnum=[]
#print(num)
for i in num:
    asnum.append(max(i,key=i.get))
#print(asnum)
aspoly=S(asnum)
flag=aspoly/a
print(list(flag))
flag=''.join(map(chr,flag))
print(flag) """


