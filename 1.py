from Crypto.Util.number import *
n = 177269125756508652546242326065138402971542751112423326033880862868822164234452280738170245589798474033047460920552550018968571267978283756742722231922451193
c = 47718022601324543399078395957095083753201631332808949406927091589044837556469300807728484035581447960954603540348152501053100067139486887367207461593404096

primes = ['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71']

ns = []
for i in range(15,20):
    for j in range(18,23):
        N = int(str(n)[:i]+str(n)[-j:])
        ch = True
        for p in primes:
            if N%int(p) == 0: #小さい素数で割れるものを排除
                ch = False
                break
        if ch:
            ns.append(N)
            print(N)
        for k in range(10):
            N = int(str(n)[:i]+str(k)+str(n)[-j:]) #nの桁だけではpqが分からない場合
            ch = True
            for p in primes:
                if N%int(p) == 0:#小さい素数で割れるものを排除
                    ch = False
                    break
            if ch:
                ns.append(N)
                print(N)
tmp = [[391111220047,25063748606238954787416469],[465963927380741639,21037493935292470637],[2647727654901734723 , 3702311783536219524841],[9324884768249686093 , 10512422984265378151],[2511932571814542137 , 39024587707209981139]] #大きい桁数×大きい桁数と素因数分解できた候補たち

for t in tmp:
    p = int(str(t[0])+str(t[1])+str(t[1])+str(t[0]))
    if n%p == 0:
        print("Find!!!")
        print(p)
        print(n//p)
        q = n//p
        phi = (p-1)*(q-1)
        e = 65537
        d = inverse(e,phi)
        m = pow(c,d,n)
        print(long_to_bytes(m))