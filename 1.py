import itertools

import gmpy2
from Crypto.Util.number import isPrime, GCD

import Rsa
p=127846753573603084140032502367311687577517286192893830888210505400863747960458410091624928485398237221748639465569360357083610343901195273740653100259873512668015324620239720302434418836556626441491996755736644886234427063508445212117628827393696641594389475794455769831224080974098671804484986257952189021223
q=145855456487495382044171198958191111759614682359121667762539436558951453420409098978730659224765186993202647878416602503196995715156477020462357271957894750950465766809623184979464111968346235929375202282811814079958258215558862385475337911665725569669510022344713444067774094112542265293776098223712339100693
r=165967627827619421909025667485886197280531070386062799707570138462960892786375448755168117226002965841166040777799690060003514218907279202146293715568618421507166624010447447835500614000601643150187327886055136468260391127675012777934049855029499330117864969171026445847229725440665179150874362143944727374907
n=p*q*r
phi_n = (p-1)*(q-1)*(r-1)
#print(phi_n)
#遍历找e
'''
fac = [2,2,2,2,3,3,7,757,1709,66553,35659041118648675482160673608858574572072308157869047737371202981594249903460020497623269009550168622543389359973919182612711244264974300950676536844158532652621048310262259408600638946582582901678618709724306790546760924212939421491701551529897731964708638784054124274642094853737974659325046312604947951379532993067967599038514330212256962702920308741742968115690205449618668584295007595340297374384362898194218023875897997449336032001524003502982547453852197022656550611598757591608149669571062906127353069187954708433422425302268631544393647948822087521977728733460650524602784941050480736669967012456465944342531652418582764339132302514652830419539453282413441359168172544942839251784929790374047782427806437029886045153636335459941961628131434260913271988926087612602243036030838364571671750727070577455770225576740495074887797533018344675468995419483883826091802056837281354570100429262306279674220756437]
for i in range(1,12):
    for s in itertools.combinations(fac,i):
        print(s)
        e = 1
        for m in s:
            e *= m
        print("sum",e)
        if isPrime(GCD(e,p-1)) and isPrime(GCD(e,q-1)) and isPrime(GCD(e,r-1)) and e==GCD(e,p-1)*GCD(e,q-1)*GCD(e,r-1):
            print("found",e)
            break
'''
fac_p = [2,7,757,1709,85015583,339028665499,149105250954771885483776047,1642463892686572578602085475101104723805585678675707586553009837707279291648160744722745420570786735582631019452016654157586623543454908938807521637550223579103317696104438456966780396624343550451096013730928292041667133825444056448136643704677066463120079]
fac_r = [2,5156273,10012111,11607389,6887213,9691125310820433463,207481569149148863420355387579836859374118899264324524198931623413527806346163890225511063077918433436357949336125293818992534978365285743609035306643103118026680748770035852667523984259458738422212308893940055928547887966452325297269749141658271108357]
fac_q = [2,2,3,3,66553,81768440203,84405986771,38037107558208320033,231892174867680693640810386060315527073423428684354379837659406564623174333523036404802975538360874662444629004557551126578093291515926917216219669811205379376441910887129690228496531958964819773495612729719107613246209344853499206156361470756345496127171943381]
e = 108281733
'''
for i in itertools.product(fac_p,fac_q,fac_r):
    e = 1
    for m in i:
        e *= m
    if phi_n%e==0 and isPrime(GCD(e,p-1)) and isPrime(GCD(e,q-1)) and isPrime(GCD(e,r-1)) and e==GCD(e,p-1)*GCD(e,q-1)*GCD(e,r-1):
        print(e)
        break
'''
c =2832775557487418816663494645849097066925967799754895979829784499040437385450603537732862576495758207240632734290947928291961063611897822688909447511260639429367768479378599532712621774918733304857247099714044615691877995534173849302353620399896455615474093581673774297730056975663792651743809514320379189748228186812362112753688073161375690508818356712739795492736743994105438575736577194329751372142329306630950863097761601196849158280502041616545429586870751042908365507050717385205371671658706357669408813112610215766159761927196639404951251535622349916877296956767883165696947955379829079278948514755758174884809479690995427980775293393456403529481055942899970158049070109142310832516606657100119207595631431023336544432679282722485978175459551109374822024850128128796213791820270973849303929674648894135672365776376696816104314090776423931007123128977218361110636927878232444348690591774581974226318856099862175526133892
e1 = GCD(e,p-1)
e2 = GCD(e,q-1)
e3 = GCD(e,r-1)
print(e1,e2,e3)
em = GCD(e,phi_n)
print(em)
#mod q 小公钥指数攻击

print(gmpy2.mpz(e/3))
d2 = gmpy2.invert(gmpy2.mpz(e/3),q-1)
mq = Rsa.decrypt(e/e2,c,d2,q)
print(mq)
m2 = Rsa.little_e(3,mq,q)
dp = gmpy2.invert(gmpy2.mpz(e/7),p-1)
mp = Rsa.decrypt(e/7,c,dp,p)
#c开七次方
dr = gmpy2.invert(21,r-1)
mr = Rsa.decrypt(21,c,dr,r)
